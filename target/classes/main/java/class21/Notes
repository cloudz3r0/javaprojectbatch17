Abstraction:
Abstraction is the process of hiding implementation details and showing
 only the functionality to the end user. We use the abstract keyword with methods
 to avoid the implementation details.
 Why should we use Abstraction?
 1)Flexibility.(if we don't know or don't want to provide the implementations for a method
 no body for the method)
 Rules:
 1)We cannot create an object of abstract classes since theres no point since they are
 incomplete.
 2)All the subclasses/child classes must provide the implementation to all of the abstract
 methods/constructors/behaviors which are from the parent or mark the child class abstract.
 3)An abstract class can have full body methods as well as abstract methods.
4)We can have instance or static fields in an abstract class.
5) Constructors are also allowed.
Abstractions shows only important things and hides the internal details.
Abstraction lets you focus on what the object does instead of how it does it i.e the
user will have the information on what the object does instead of how it does it.
Abstraction is nothing but the process of giving a set of guidelines to the user, who are
going to implement these guidelines based on their needs.
Abstraction is the concept of exposing only the required essential characteristics
and behavior with respect to a context.

